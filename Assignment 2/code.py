# -*- coding: utf-8 -*-
"""final CF A2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jsJOkQAn3QDoNBObObBnmKd0mM8yh8BG
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/gdrive')
# %cd '/content/gdrive/MyDrive/CFDataset/ml-100k'
# %ls
import warnings
warnings.filterwarnings('ignore')

import pandas as pd
import numpy as np
from sklearn.metrics import mean_absolute_error
from scipy.sparse.linalg import lsqr
from scipy.sparse.linalg import cg

def readData(name):
  fold = pd.read_csv(name, sep="\t", header=None)
  fold.columns = ['userId', 'movieId', 'rating', 'timestamp']
  fold['userId'] = fold['userId'].astype(int)
  fold['movieId'] = fold['movieId'].astype(int)
  fold['rating'] = fold['rating'].astype(int)
  fold['timestamp'] = fold['timestamp'].astype(int)
  return fold

def userItemMatrix(data):
  n = 943
  m = 1682
  matrix = [[0]*m for i in range(n)]

  for i in range(len(data)):
    userid = data['userId'][i]
    movieid = data['movieId'][i]
    rating = data['rating'][i]
    matrix[userid-1][movieid-1] = rating
  return np.array(matrix)

def MAEScore(actualR,predR):
  return mean_absolute_error(actualR, predR)

class LFM:
  def __init__(self, n_factor,  n_iteration, ratings):
    self.n_factors = n_factor
    self.n_iterations = n_iteration
    self.ratings = ratings
    self.n_users = ratings.shape[0]
    self.n_items  = ratings.shape[1]

  def mask(self, X):
    for i in range(self.n_users):
      for j in range(self.n_items):
        if(self.ratings[i][j] == 0):
            X[i][j] =0
    return X

  def ALS(self):
    user_factor = np.random.random((self.n_users,self.n_factors))
    item_factor = np.random.random((self.n_factors,self.n_items))
    user_factor, item_factor = self.start_iterations(user_factor,item_factor)
    pred_ratings = user_factor.dot(item_factor)
    return pred_ratings

  def start_iterations(self, user_factor, item_factor):
    for iter in range(self.n_iterations):
      X = user_factor.dot(item_factor)
      B = X + self.ratings - self.mask(user_factor.dot(item_factor))
      for inner in range(10):
        item_factor = np.linalg.solve(user_factor.T@user_factor,user_factor.T@B)

        user_factor = user_factor.T
        item_factor = item_factor.T
        B = B.T
        user_factor = np.linalg.solve(item_factor.T@item_factor,item_factor.T@B)
        user_factor = user_factor.T
        item_factor = item_factor.T
        B = B.T
    return user_factor,item_factor

def prediction(ratings_pred, testData):
  predList = list()
  actualList =list()
  for i in range(testData.shape[0]):
    userID = testData['userId'][i]-1
    movieID = testData['movieId'][i]-1
    predList.append(ratings_pred[userID][movieID])
    actualList.append(testData['rating'][i])

  finalAccuracy = MAEScore(actualList,predList)
  return finalAccuracy

def normalize(ratings_pred):
  for i in range(len(ratings_pred)):
    for j in range(len(ratings_pred[0])):
      ratings_pred[i][j] = abs( ratings_pred[i][j])
      ratings_pred[i][j] = round(ratings_pred[i][j])
      if(ratings_pred[i][j]<1):
        ratings_pred[i][j] =1
      if(ratings_pred[i][j]>5):
        ratings_pred[i][j] =5
  return ratings_pred

for fold in range(1,6):
  trainData = readData('u' + str(fold) + '.base')
  testData = readData('u' + str(fold) + '.test')

  matrix = userItemMatrix(trainData)
  LFM_class = LFM(10,30,matrix)
  ratings_pred = LFM_class.ALS()
  ratings_pred = normalize(ratings_pred)
  NMAE =  prediction(ratings_pred,testData)/4
  print(f"Fold {fold} NMAE score: {NMAE}")

for fold in range(1,6):
  trainData = readData('u' + str(fold) + '.base')
  testData = readData('u' + str(fold) + '.test')

  matrix = userItemMatrix(trainData)
  LFM_class = LFM(5,30,matrix)
  ratings_pred = LFM_class.ALS()
  ratings_pred = normalize(ratings_pred)
  NMAE =  prediction(ratings_pred,testData)/4
  print(f"Fold {fold} NMAE score: {NMAE}")

for fold in range(1,6):
  trainData = readData('u' + str(fold) + '.base')
  testData = readData('u' + str(fold) + '.test')

  matrix = userItemMatrix(trainData)
  LFM_class = LFM(15,30,matrix)
  ratings_pred = LFM_class.ALS()
  ratings_pred = normalize(ratings_pred)
  NMAE =  prediction(ratings_pred,testData)/4
  print(f"Fold {fold} NMAE score: {NMAE}")

